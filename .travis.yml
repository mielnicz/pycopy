# global options
dist: xenial
language:
  - c
compiler:
  - gcc
cache:
  directories:
    - "${HOME}/persist"
env:
  global:
    - MAKEOPTS="-j4"
    - XTENSA_CROSS_ROOT="${HOME}/persist/toolchain-xtensa"
    - XTENSA_CROSS_BINDIR="${XTENSA_CROSS_ROOT}/bin"
git:
  submodules: false

addons:
  apt:
    packages:
    - make
    - unrar
    - autoconf
    - automake
    - libtool
    - libtool-bin
    - gcc
    - g++
    - gperf
    - flex
    - bison
    - texinfo
    - gawk
    - libncurses5-dev
    - libexpat1-dev
    - python
    - sed
    - help2man
    - libmbedtls-dev

# define the successive stages
stages:
  - name: test

# define the jobs for the stages
# approx order of the jobs has longest running first to optimise total time
jobs:
  include:
    # check code formatting
    - stage: test
      os: linux
      dist: bionic
      name: "code formatting"
      before_install:
        - sudo apt-add-repository --yes --update ppa:pybricks/ppa
      install:
        - sudo apt-get install uncrustify python3-pip
        - uncrustify --version
        - pip3 install --user setuptools
        - pip3 install --user black
        - black --version
      script:
        - tools/codeformat.py
        - git diff --exit-code

    # esp8266 port
    - stage: test
      name: "esp8266 port build"
      install:
        - export HAS_XTENSA="test -d ${XTENSA_CROSS_BINDIR}"
        - unset CC # Travis sets this due to "language: c", but it confuses autotools configure when cross-building
        - ${HAS_XTENSA} || git clone --recursive https://github.com/pfalcon/esp-open-sdk.git
        - ${HAS_XTENSA} || cd esp-open-sdk
        - ${HAS_XTENSA} || sed -r -i 's%TOOLCHAIN ?=.*%TOOLCHAIN=${XTENSA_CROSS_ROOT}%' Makefile
        - ${HAS_XTENSA} || make
      script:
        - cd ${TRAVIS_BUILD_DIR}
        - make ${MAKEOPTS} -C mpy-cross
        - make -C ports/esp8266 submodules
        - PATH=${XTENSA_CROSS_BINDIR}:${PATH} make -C ports/esp8266

    # zephyr port
    - stage: test
      name: "zephyr port build"
      services:
        - docker
      before_install:
        - docker pull zephyrprojectrtos/ci:v0.11.8
        - >
          docker run --name zephyr-ci -d -it
          -v "$(pwd)":/micropython
          -e ZEPHYR_SDK_INSTALL_DIR=/opt/sdk/zephyr-sdk-0.11.3
          -e ZEPHYR_TOOLCHAIN_VARIANT=zephyr
          -w /micropython/ports/zephyr
          zephyrprojectrtos/ci:v0.11.8
        - docker ps -a
      install:
        - docker exec zephyr-ci west init --mr v2.4.0 /zephyrproject
        - docker exec -w /zephyrproject zephyr-ci west update
        - docker exec -w /zephyrproject zephyr-ci west zephyr-export
      script:
        - docker exec zephyr-ci bash -c "make clean; ./make-minimal ${MAKEOPTS}"
        - docker exec zephyr-ci bash -c "make clean; ./make-minimal ${MAKEOPTS} BOARD=frdm_k64f"
        - docker exec zephyr-ci bash -c "make clean; make ${MAKEOPTS}"
        - docker exec zephyr-ci bash -c "make clean; make ${MAKEOPTS} BOARD=frdm_k64f"
        - docker exec zephyr-ci bash -c "make clean; make ${MAKEOPTS} BOARD=mimxrt1050_evk"
        - docker exec zephyr-ci bash -c "make clean; make ${MAKEOPTS} BOARD=reel_board"

    # unix port on OSX (first in list because the build VM takes a long time to start)
    - stage: test
      os: osx
      osx_image: xcode11.3
      name: "unix port build with clang on OSX"
      env:
        - PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig
      install:
        - brew install pkgconfig || true
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/unix submodules
        - make ${MAKEOPTS} -C ports/unix deplibs
        - make ${MAKEOPTS} -C ports/unix
        # OSX has poor time resolution and the following tests do not have the correct output
        - (cd tests && ./run-tests --exclude 'uasyncio_(basic|heaplock|lock|wait_task)')
        # check for additional compiler errors/warnings
        - make ${MAKEOPTS} -C ports/unix VARIANT=coverage
      after_failure:
        - tests/run-tests --print-failures

    # stm32 port
    - stage: test
      name: "stm32 port build"
      install:
        # need newer gcc version for Cortex-M7 support
        - sudo add-apt-repository -y ppa:team-gcc-arm-embedded/ppa
        - sudo apt-get update -qq || true
        - sudo apt-get install gcc-arm-embedded
        - arm-none-eabi-gcc --version
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/stm32 submodules
        - git submodule update --init lib/btstack
        - make ${MAKEOPTS} -C ports/stm32 BOARD=NUCLEO_F091RC
        - make ${MAKEOPTS} -C ports/stm32 BOARD=PYBV11 MICROPY_PY_WIZNET5K=5200 MICROPY_PY_CC3K=1
        - make ${MAKEOPTS} -C ports/stm32 BOARD=PYBD_SF2
        - make ${MAKEOPTS} -C ports/stm32 BOARD=PYBD_SF6 NANBOX=1 MICROPY_BLUETOOTH_NIMBLE=0 MICROPY_BLUETOOTH_BTSTACK=1
        - make ${MAKEOPTS} -C ports/stm32 BOARD=NUCLEO_H743ZI CFLAGS_EXTRA='-DMICROPY_PY_THREAD=1'
# Runs out of flash
#        - make ${MAKEOPTS} -C ports/stm32 BOARD=B_L072Z_LRWAN1
        - make ${MAKEOPTS} -C ports/stm32 BOARD=STM32L476DISC
        - make ${MAKEOPTS} -C ports/stm32 BOARD=NUCLEO_WB55
        - make ${MAKEOPTS} -C ports/stm32/mboot BOARD=PYBV10 CFLAGS_EXTRA='-DMBOOT_FSLOAD=1 -DMBOOT_VFS_LFS2=1'
        - make ${MAKEOPTS} -C ports/stm32/mboot BOARD=PYBD_SF6
        - make ${MAKEOPTS} -C ports/stm32/mboot BOARD=NUCLEO_WB55

    # qemu-arm port
    - stage: test
      dist: bionic # needed for more recent version of qemu-system-arm with mps2-an385 target
      name: "qemu-arm port build and tests"
      install:
        - sudo apt-get install gcc-arm-none-eabi libnewlib-arm-none-eabi qemu-system
        - arm-none-eabi-gcc --version
        - qemu-system-arm --version
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/qemu-arm CFLAGS_EXTRA=-DMP_ENDIANNESS_BIG=1
        - make ${MAKEOPTS} -C ports/qemu-arm clean
        - make ${MAKEOPTS} -C ports/qemu-arm -f Makefile.test test
      after_failure:
        - grep --text "FAIL" ports/qemu-arm/build/console.out

    # unix coverage
    - stage: test
      name: "unix coverage build and tests"
      install:
        # Install gcc 7.x, as older version has glitchy strict alisasing warnings-as-errors
        - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        - sudo apt-get update -qq || true
        - sudo apt-get install -y gcc-7
        - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 80
        - sudo update-alternatives --config gcc
        - sudo apt-get install python3-pip
        - sudo pip install cpp-coveralls
        - sudo pip3 install setuptools
        - sudo pip3 install pyelftools
        - gcc --version
        - python3 --version
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/unix submodules
        - make ${MAKEOPTS} -C ports/unix deplibs
        - make ${MAKEOPTS} -C ports/unix coverage
        # run the main test suite
        - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/pycopy-coverage ./run-multitests.py multi_net/*.py) || travis_terminate 1
        - make -C ports/unix VARIANT=coverage test_full
        # test building native mpy modules
        - make -C examples/natmod/features1 ARCH=x64
        - make -C examples/natmod/features2 ARCH=x64
        - make -C examples/natmod/btree ARCH=x64
        - make -C examples/natmod/framebuf ARCH=x64
        - make -C examples/natmod/uheapq ARCH=x64
        - make -C examples/natmod/ure ARCH=x64
        - make -C examples/natmod/uzlib ARCH=x64
        # test importing .mpy generated by mpy_ld.py
        - PYCOPYPATH=examples/natmod/features2 ./ports/unix/pycopy-coverage -m features2
        - (cd tests && ./run-natmodtests.py extmod/{btree*,framebuf*,uheapq*,ure*,uzlib*}.py)
        # run coveralls coverage analysis (try to, even if some builds/tests failed)
        - (cd ports/unix && coveralls --root ../.. --build-root . --gcov $(which gcov) --gcov-options '\-o build-coverage/' --include py --include extmod)
      after_failure:
        - tests/run-tests --print-failures

    # unix coverage 32-bit
    - stage: test
      dist: bionic
      name: "unix coverage 32-bit build and tests"
      install:
        # Install gcc 7.x, as older version has glitchy strict alisasing warnings-as-errors
        - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        - sudo apt-get update -qq || true
        - sudo apt-get install -y gcc-7
        - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 80
        - sudo update-alternatives --config gcc
        - sudo apt-get install gcc-multilib gcc-7-multilib libffi-dev:i386
        - sudo apt-get install python3-pip
        - sudo pip3 install setuptools
        - sudo pip3 install pyelftools
        - gcc --version
        - python3 --version
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/unix MICROPY_FORCE_32BIT=1 submodules
        - make ${MAKEOPTS} -C ports/unix MICROPY_FORCE_32BIT=1 deplibs
        - make ${MAKEOPTS} -C ports/unix MICROPY_FORCE_32BIT=1 coverage
        # run the main test suite
        - make -C ports/unix MICROPY_FORCE_32BIT=1 VARIANT=coverage test_full || travis_terminate 1
        # test building native mpy modules
        - make -C examples/natmod/features1 ARCH=x86
        - make -C examples/natmod/features2 ARCH=x86
        - make -C examples/natmod/btree ARCH=x86
        - make -C examples/natmod/framebuf ARCH=x86
        - make -C examples/natmod/uheapq ARCH=x86
        - make -C examples/natmod/urandom ARCH=x86
        - make -C examples/natmod/ure ARCH=x86
        - make -C examples/natmod/uzlib ARCH=x86
        # test importing .mpy generated by mpy_ld.py
        - PYCOPYPATH=examples/natmod/features2 ./ports/unix/pycopy-coverage  -m features2
        - (cd tests && ./run-natmodtests.py --arch x86 extmod/{btree*,framebuf*,uheapq*,ure*,uzlib*}.py)
      after_failure:
        - tests/run-tests --print-failures

    # standard unix port
    - stage: test
      name: "unix port build and tests"
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/unix submodules
        - make ${MAKEOPTS} -C ports/unix deplibs
        - make ${MAKEOPTS} -C ports/unix
        - make ${MAKEOPTS} -C ports/unix test
        - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/pycopy ./run-perfbench.py 1000 1000)
      after_failure:
        - tests/run-tests --print-failures

    # unix port with mbedTLS
    - stage: test
      name: "unix port with mbedTLS build and tests"
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/unix submodules
        - make ${MAKEOPTS} -C ports/unix MICROPY_SSL_MBEDTLS=1 MICROPY_SSL_AXTLS=0
        - make ${MAKEOPTS} -C ports/unix MICROPY_SSL_MBEDTLS=1 MICROPY_SSL_AXTLS=0 test RUN_TESTS_EXTRA="-e ussl_basic"

    # micropython-dev unix port
    - stage: test
      name: "unix port micropython-dev"
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/unix submodules
        - make ${MAKEOPTS} -C ports/unix dev
        - make ${MAKEOPTS} -C ports/unix dev_test

    # unix nanbox, float
    - stage: test
      name: "unix nanbox/float port build and tests"
      install:
        - sudo apt-get install gcc-multilib libffi-dev:i386
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/unix submodules
        - make ${MAKEOPTS} -C ports/unix deplibs
        - make ${MAKEOPTS} -C ports/unix nanbox
        - make ${MAKEOPTS} -C ports/unix VARIANT=nanbox test_full || travis_terminate 1

        - make ${MAKEOPTS} -C ports/unix clean
        - make ${MAKEOPTS} -C ports/unix CFLAGS_EXTRA="-DMICROPY_FLOAT_IMPL=MICROPY_FLOAT_IMPL_FLOAT"
        - make ${MAKEOPTS} -C ports/unix test
      after_failure:
        - tests/run-tests --print-failures

    # unix stackless
    - stage: test
      name: "unix stackless port build and tests"
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/unix submodules
        - make ${MAKEOPTS} -C ports/unix deplibs
        - make ${MAKEOPTS} -C ports/unix CFLAGS_EXTRA="-DMICROPY_STACKLESS=1 -DMICROPY_STACKLESS_STRICT=1"
        - make ${MAKEOPTS} -C ports/unix test

    # unix port with clang
    - stage: test
      name: "unix port with clang"
      script:
        - make ${MAKEOPTS} CC=clang -C mpy-cross
        - make ${MAKEOPTS} -C ports/unix submodules
        - make ${MAKEOPTS} CC=clang -C ports/unix
        - make ${MAKEOPTS} CC=clang -C ports/unix test || travis_terminate 1

        - make ${MAKEOPTS} -C ports/unix clean
        - make ${MAKEOPTS} -C ports/unix CC=clang CFLAGS_EXTRA="-DMICROPY_FLOAT_IMPL=MICROPY_FLOAT_IMPL_FLOAT"
        - make ${MAKEOPTS} -C ports/unix CC=clang test
      after_failure:
        - tests/run-tests --print-failures

    # unix with sys.settrace
    - stage: test
      name: "unix port with sys.settrace build and tests"
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/unix MICROPY_PY_BTREE=0 MICROPY_PY_FFI=0 MICROPY_PY_USSL=0 CFLAGS_EXTRA="-DMICROPY_PY_SYS_SETTRACE=1" test || travis_terminate 1
        - make ${MAKEOPTS} -C ports/unix clean
        - make ${MAKEOPTS} -C ports/unix MICROPY_PY_BTREE=0 MICROPY_PY_FFI=0 MICROPY_PY_USSL=0 CFLAGS_EXTRA="-DMICROPY_STACKLESS=1 -DMICROPY_STACKLESS_STRICT=1 -DMICROPY_PY_SYS_SETTRACE=1" test
      after_failure:
        - tests/run-tests --print-failures

    # minimal unix port with tests
    - stage: test
      name: "minimal unix port build and tests"
      script:
        - make ${MAKEOPTS} -C ports/unix minimal
        - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/pycopy-minimal ./run-tests -e exception_chain -e self_type_check -e subclass_native_init -e class_slots_ -d basics)
      after_failure:
        - tests/run-tests --print-failures

    # windows port via mingw
    - stage: test
      name: "windows port build via mingw"
      install:
        - sudo apt-get install gcc-mingw-w64
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/windows CROSS_COMPILE=i686-w64-mingw32-

    # esp32 w/ESP-IDFv3 port
    - stage: test
      name: "esp32 ESP-IDFv3 port build"
      install:
        - sudo apt-get install python3-pip python-serial
        - sudo pip3 install 'pyparsing<2.4'
        - curl -L https://dl.espressif.com/dl/xtensa-esp32-elf-linux64-1.22.0-80-g6c4433a-5.2.0.tar.gz | tar zxf -
        - export PATH=$(pwd)/xtensa-esp32-elf/bin:$PATH
        - git clone https://github.com/espressif/esp-idf.git
        - export IDF_PATH=$(pwd)/esp-idf
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - git -C esp-idf checkout $(grep "ESPIDF_SUPHASH_V3 :=" ports/esp32/Makefile | cut -d " " -f 3)
        - git -C esp-idf submodule update --init components/json/cJSON components/esp32/lib components/esptool_py/esptool components/expat/expat components/lwip/lwip components/micro-ecc/micro-ecc components/nghttp/nghttp2 components/nimble components/bt
        - (cd esp-idf/components/mbedtls/; rm -rf mbedtls; git clone -b mbedtls-2.16.5-idf-pycopy https://github.com/pfalcon/mbedtls/)
#        - git -C esp-idf log -n1 components/mbedtls/mbedtls
        - (cd esp-idf/components/mbedtls/mbedtls; git log -n1)
        - make ${MAKEOPTS} -C ports/esp32 submodules
        - make ${MAKEOPTS} -C ports/esp32

    # esp32 w/ESP-IDFv4 port
    - stage: test
      name: "esp32 ESP-IDFv4 port build"
      install:
        - sudo apt-get install python3-pip python-serial
        - sudo pip3 install 'pyparsing<2.4'
        - curl -L https://dl.espressif.com/dl/xtensa-esp32-elf-gcc8_2_0-esp-2019r2-linux-amd64.tar.gz | tar zxf -
        - export PATH=$(pwd)/xtensa-esp32-elf/bin:$PATH
        - git clone https://github.com/espressif/esp-idf.git
        - export IDF_PATH=$(pwd)/esp-idf
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - git -C esp-idf checkout $(grep "ESPIDF_SUPHASH_V4 :=" ports/esp32/Makefile | cut -d " " -f 3)
        - git -C esp-idf submodule update --init components/bt/controller/lib components/bt/host/nimble/nimble components/esp_wifi/lib_esp32 components/esptool_py/esptool components/lwip/lwip
        - (cd esp-idf/components/mbedtls/; rm -rf mbedtls; git clone -b mbedtls-2.16.5-idf-pycopy https://github.com/pfalcon/mbedtls/)
#        - git -C esp-idf log -n1 components/mbedtls/mbedtls
        - (cd esp-idf/components/mbedtls/mbedtls; git log -n1)
        - make ${MAKEOPTS} -C ports/esp32 submodules
        - make ${MAKEOPTS} -C ports/esp32

    # nrf port
    - stage: test
      name: "nrf port build"
      install:
        # need newer gcc version for Cortex-M33 support
        - sudo add-apt-repository -y ppa:team-gcc-arm-embedded/ppa
        - sudo apt-get update -qq || true
        - sudo apt-get install gcc-arm-embedded
        - arm-none-eabi-gcc --version
      script:
        - ports/nrf/drivers/bluetooth/download_ble_stack.sh s140_nrf52_6_1_1
        - make ${MAKEOPTS} -C ports/nrf submodules
        - make ${MAKEOPTS} -C ports/nrf BOARD=pca10040
        - make ${MAKEOPTS} -C ports/nrf BOARD=microbit
        - make ${MAKEOPTS} -C ports/nrf BOARD=pca10056 SD=s140
        - make ${MAKEOPTS} -C ports/nrf BOARD=pca10090

    # bare-arm and minimal ports
    - stage: test
      name: "bare-arm and minimal ports build"
      install:
        - sudo apt-get install gcc-multilib libffi-dev:i386 gcc-arm-none-eabi libnewlib-arm-none-eabi
        - gcc --version
        - arm-none-eabi-gcc --version
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/bare-arm
        - make ${MAKEOPTS} -C ports/minimal CROSS=1 build/firmware.bin
        - ls -l ports/minimal/build/firmware.bin
        - tools/check_code_size.sh
        - mkdir -p ${HOME}/persist
        # Save new firmware for reference, but only if building a main branch, not a pull request
        - 'if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then cp ports/minimal/build/firmware.bin ${HOME}/persist/; fi'

    # cc3200 port
    - stage: test
      name: "cc3200 port build"
      install:
        - sudo apt-get install gcc-arm-none-eabi libnewlib-arm-none-eabi
      script:
        - make ${MAKEOPTS} -C ports/cc3200 BTARGET=application BTYPE=release
        - make ${MAKEOPTS} -C ports/cc3200 BTARGET=bootloader  BTYPE=release

    # samd port
    - stage: test
      name: "samd port build"
      install:
        - sudo apt-get install gcc-arm-none-eabi libnewlib-arm-none-eabi
      script:
        - make ${MAKEOPTS} -C ports/samd submodules
        - make ${MAKEOPTS} -C ports/samd

    # teensy port
    - stage: test
      name: "teensy port build"
      install:
        - sudo apt-get install gcc-arm-none-eabi libnewlib-arm-none-eabi
      script:
        - make ${MAKEOPTS} -C ports/teensy

    # powerpc port
    - stage: test
      name: "powerpc port build"
      install:
        - sudo apt-get install gcc-powerpc64le-linux-gnu libc6-dev-ppc64el-cross
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/powerpc UART=potato
        - make ${MAKEOPTS} -C ports/powerpc UART=lpc_serial
